generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ─── ENUMS ─────────────────────────────────────────────────────────────

enum UserRole {
  USER
  ADMIN
}

enum MediaType {
  IMAGE
  VIDEO
  STORY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  MOCK_PAID
  FAILED
}

/// ─── MODELS ────────────────────────────────────────────────────────────

model User {
  id           String    @id @default(uuid())
  email        String?
  login        String
  passwordHash String
  salt         String    @default("")
  comments     Comment[]
  likes        Like[]
  bookings     Booking[]
  role         UserRole  @default(USER)

  // Дополнительные поля
  verified         DateTime? // для email-верификации
  provider         String? // например, "google", "github"
  providerId       String? // id от провайдера
  verificationCode VerificationCode? // связь с таблицей кодов

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId]) // для быстрых проверок
}

model Post {
  id        String     @id @default(uuid())
  title     String?
  content   String?
  mediaUrl  String?
  publicId  String?
  mediaType MediaType?
  comments  Comment[]
  likes     Like[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Like {
  id String @id @default(uuid())

  // юзер текущуй
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // пост на котором ставят лайк
  // на каком? Как узнать какой у него айди в бд?
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  createdAt DateTime @default(now())

  @@unique([userId, postId]) // один лайк от одного юзера на пост
}

model Booking {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  dateTime DateTime // начало сеанса
  status   BookingStatus @default(PENDING)

  createdAt DateTime @default(now())
  payment   Payment?

  @@unique([dateTime]) // один сеанс — одно бронирование
}

model Payment {
  id        String        @id @default(uuid())
  booking   Booking       @relation(fields: [bookingId], references: [id])
  bookingId String        @unique
  amount    Float         @default(500)
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
}
